# The example uses the Cloud Spanner dialect that is maintained by Google.
# The dialect is automatically selected based on the JDBC connection URL.
# It is therefore not necessary to explicitly set it in the configuration.
# spring.jpa.database-platform=com.google.cloud.spanner.hibernate.SpannerDialect
# ------- Spanner configuration ------- #
# Defining these properties here makes it a bit easier to build the connection string.
# Change these to match your Cloud Spanner database.
spanner.project=my-project
spanner.instance=my-instance
spanner.database=my-database
# The sample by default uses the Cloud Spanner emulator.
# Set to false for running on real Cloud Spanner.
spanner.emulator=true
spring.datasource.url=jdbc:cloudspanner:${spanner.host}/projects/${spanner.project}/instances/${spanner.instance}/databases/${spanner.database}?autoConfigEmulator=${spanner.emulator}
# ------- Hibernate configuration ------- #
# Specify the Spanner JDBC driver.
spring.datasource.driver-class-name=com.google.cloud.spanner.jdbc.JdbcDriver
# Specify the Spanner Hibernate dialect.
spring.jpa.properties.hibernate.dialect=com.google.cloud.spanner.hibernate.SpannerDialect
# Automatically create/update the database schema.
spring.jpa.hibernate.ddl-auto=update
# Set this property to true to see all SQL statements that are being executed.
spring.jpa.show-sql=true
# ------- Test configuration ------- #
# Used for testing.
spanner.host=
spanner.connectionProperties=