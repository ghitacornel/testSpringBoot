{
	"info": {
		"_postman_id": "31c261c1-b713-4fd3-b0f4-dad485434372",
		"name": "testSpringBoot",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "servlets",
			"item": [
				{
					"name": "simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hello World! GET with filter attribute value filterAddedValue custom servlet\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/customServletURL",
							"host": [
								"{{url}}"
							],
							"path": [
								"customServletURL"
							]
						}
					},
					"response": []
				},
				{
					"name": "with query parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hello World! beans.http.servlets.CustomServletGET with parameter 'customParameterName' = aaa custom servlet\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/customServletURLGET?customParameterName=aaa",
							"host": [
								"{{url}}"
							],
							"path": [
								"customServletURLGET"
							],
							"query": [
								{
									"key": "customParameterName",
									"value": "aaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "test post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hello World! beans.http.servlets.CustomServletPOST with attribute 'customAttributeName' = gicu custom servlet\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/customServletURLPOST",
							"host": [
								"{{url}}"
							],
							"path": [
								"customServletURLPOST"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user/all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"[ ]\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "freemarker",
			"item": [
				{
					"name": "{{url}}/freemarker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hello domnul World!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/freemarker",
							"host": [
								"{{url}}"
							],
							"path": [
								"freemarker"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rest jdbc",
			"item": [
				{
					"name": "{{url}}/user/all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"[ ]\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user?id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user?id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"vasile\",\r\n  \"pass\": \"db pass vasile\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user DUPLICATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"vasile\",\r\n  \"pass\": \"db pass vasile\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"vasile\",\r\n  \"pass\": \"db pass vasile\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user SECOND UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"vasile\",\r\n  \"pass\": \"db pass vasile\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user?id=1 WITH DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expected = \r",
									"    {\r",
									"        \"id\": 1,\r",
									"        \"name\": \"vasile\",\r",
									"        \"pass\": \"db pass vasile\"\r",
									"    }\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user?id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user/all WITH DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expected = [\r",
									"    {\r",
									"        \"id\": 1,\r",
									"        \"name\": \"vasile\",\r",
									"        \"pass\": \"db pass vasile\"\r",
									"    }\r",
									"]\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/user/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user?id=1 NO DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user?id=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/user/all NO DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"[ ]\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "validation",
			"item": [
				{
					"name": "no id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var expected = \r",
									"[\r",
									"    {\r",
									"        \"fieldName\": \"id\",\r",
									"        \"message\": \"must not be null\",\r",
									"        \"messageCode\": \"NotNull\"\r",
									"    }\r",
									"]\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"vasile\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/validate/rest",
							"host": [
								"{{url}}"
							],
							"path": [
								"validate",
								"rest"
							]
						}
					},
					"response": []
				},
				{
					"name": "null id and empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var expected = \r",
									"[\r",
									"    {\r",
									"        \"fieldName\": \"id\",\r",
									"        \"message\": \"must not be null\",\r",
									"        \"messageCode\": \"NotNull\"\r",
									"    },\r",
									"    {\r",
									"        \"fieldName\": \"name\",\r",
									"        \"message\": \"must not be empty\",\r",
									"        \"messageCode\": \"NotEmpty\"\r",
									"    },\r",
									"    {\r",
									"        \"fieldName\": \"name\",\r",
									"        \"message\": \"size must be between 2 and 30\",\r",
									"        \"messageCode\": \"Size\"\r",
									"    }\r",
									"]\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/validate/rest",
							"host": [
								"{{url}}"
							],
							"path": [
								"validate",
								"rest"
							]
						}
					},
					"response": []
				},
				{
					"name": "empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var expected = \r",
									"[\r",
									"    {\r",
									"        \"fieldName\": \"name\",\r",
									"        \"message\": \"must not be empty\",\r",
									"        \"messageCode\": \"NotEmpty\"\r",
									"    },\r",
									"    {\r",
									"        \"fieldName\": \"name\",\r",
									"        \"message\": \"size must be between 2 and 30\",\r",
									"        \"messageCode\": \"Size\"\r",
									"    }\r",
									"]\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1\",\r\n  \"name\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/validate/rest",
							"host": [
								"{{url}}"
							],
							"path": [
								"validate",
								"rest"
							]
						}
					},
					"response": []
				},
				{
					"name": "empty name service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var expected = \r",
									"[\r",
									"    {\r",
									"        \"fieldName\": \"invoke.model.name\",\r",
									"        \"message\": \"must not be empty\",\r",
									"        \"messageCode\": \"{javax.validation.constraints.NotEmpty.message}\"\r",
									"    },\r",
									"    {\r",
									"        \"fieldName\": \"invoke.model.name\",\r",
									"        \"message\": \"size must be between 2 and 30\",\r",
									"        \"messageCode\": \"{javax.validation.constraints.Size.message}\"\r",
									"    }\r",
									"]\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1\",\r\n  \"name\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/validate/service",
							"host": [
								"{{url}}"
							],
							"path": [
								"validate",
								"service"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "retry",
			"item": [
				{
					"name": "stableResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expected = \"stable resource\"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.text();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/retry/stableResource",
							"host": [
								"{{url}}"
							],
							"path": [
								"retry",
								"stableResource"
							]
						}
					},
					"response": []
				},
				{
					"name": "resourceFailBasedOnParameter_OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expected = \"resource with temporary issues\"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.text();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/retry/resourceFailBasedOnParameter/false",
							"host": [
								"{{url}}"
							],
							"path": [
								"retry",
								"resourceFailBasedOnParameter",
								"false"
							]
						}
					},
					"response": []
				},
				{
					"name": "resourceFailBasedOnParameter_FAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expected = \"resource unavailable for now, returning default for parameter=true\"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.text();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/retry/resourceFailBasedOnParameter/true",
							"host": [
								"{{url}}"
							],
							"path": [
								"retry",
								"resourceFailBasedOnParameter",
								"true"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "security",
			"item": [
				{
					"name": "secured",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expected = \"secured answer\"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.text();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/secured",
							"host": [
								"{{url}}"
							],
							"path": [
								"secured"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8081",
			"type": "default"
		}
	]
}